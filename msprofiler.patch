diff --git a/image.py b/image.py
index 48503cfe..b235728c 100644
--- a/image.py
+++ b/image.py
@@ -24,6 +24,8 @@ import cv2
 import time
 import numpy as np
 import MxpiDataType_pb2 as MxpiDataType
+import acl
+
 from StreamManagerApi import (
     StreamManagerApi,
     MxDataInput,
@@ -126,6 +128,21 @@ if __name__ == "__main__":
     if ret != 0:
         print("Failed to init Stream manager, ret=%s" % str(ret))
         exit()
+    # for profiling dfx, create profiling stamp
+    stamp = acl.prof.create_stamp()
+    if stamp == 0:
+        print("Warning: stamp is nullptr")
+    #for profiling dfx, set stamp message
+    stampMsg = "CreateMultipleStreamsFromFile"
+    msgLen = len(stampMsg)
+    ret = acl.prof.set_stamp_trace_message(stamp, stampMsg, msgLen)
+    if ret != 0:
+        print("Warning: set_stamp_trace_message, ret =%s" % str(ret))
+    #for profiling dfx, get start time
+    ret = acl.prof.push(stamp)
+    if ret != 0:
+        print("Warning: acl.prof.push, ret =%s" % str(ret))
+    time.sleep(5)
     # create streams by pipeline config file
     pipeline_path = b"main.pipeline"
     ret = streamManagerApi.CreateMultipleStreamsFromFile(pipeline_path)
@@ -133,6 +150,10 @@ if __name__ == "__main__":
         print("Failed to create Stream, ret=%s" % str(ret))
         exit()
 
+    # for profiling dfx, get end time
+    ret = acl.prof.pop()
+    if ret != 0:
+        print("Warning: acl.prof.pop, ret =%s" % str(ret))
     # Construct the input of the stream
     img_path = sys.argv[1]
     streamName = b"detection"
@@ -140,6 +161,17 @@ if __name__ == "__main__":
     dataInput = MxDataInput()
     with open(img_path, "rb") as f:
         dataInput.data = f.read()
+    # for profiling dfx, mark:begin to inference
+    stampMsg = "Begin to inference"
+    msgLen = len(stampMsg)
+    ret = acl.prof.set_stamp_trace_message(stamp, stampMsg, msgLen)
+    if ret != 0:
+        print("Warning: set_stamp_trace_message, ret =%s" % str(ret))
+    ret = acl.prof.mark(stamp)
+    if ret != 0:
+        print("Warning: acl.prof.mark, ret =%s" % str(ret))
+    print("============inference start=================")
+    starttime = time.time()
     # Inputs data to a specified stream based on streamName.
     uniqueId = streamManagerApi.SendData(streamName, inPluginId, dataInput)
     if uniqueId < 0:
@@ -150,6 +182,21 @@ if __name__ == "__main__":
     key_vec.push_back(b"mxpi_tensorinfer0")
     # get inference result
     infer_result = streamManagerApi.GetProtobuf(streamName, inPluginId, key_vec)
+    endtime = time.time()
+    print("============inference end===================")
+    print("============inference starttime:%s ms, endtime:%s ms, durationtime:%s ms=================" %
+        ((int(round(starttime * 1000))), (int(round(endtime * 1000))), (int(round((endtime - starttime) * 1000)))))
+    # for profiling dfx, mark:end to inference
+    stampMsg = "End to inference"
+    msgLen = len(stampMsg)
+    ret = acl.prof.set_stamp_trace_message(stamp, stampMsg, msgLen)
+    if ret != 0:
+        print("Warning: set_stamp_trace_message, ret =%s" % str(ret))
+    ret = acl.prof.mark(stamp)
+    if ret != 0:
+        print("Warning: acl.prof.mark, ret =%s" % str(ret))
+    # for profiling dfx, destory profiling stamp
+    acl.prof.destroy_stamp(stamp)
     a = infer_result.size()
     if infer_result.size() == 0:
         print("infer_result is null")
